{"version":3,"sources":["components/Header.jsx","pages/Metadata.jsx","pages/NewProcess.jsx","pages/Processes.jsx","pages/Subscriptions.jsx","pages/Tasks.jsx","App.jsx","serviceWorker.js","index.js"],"names":["withStyles","theme","indicator","backgroundColor","tabRoot","fontWeight","fontSize","classes","location","useLocation","console","log","useState","pathname","value","setValue","Tabs","onChange","e","Tab","className","label","component","Link","to","Metadata","NewProcess","Processes","Subscriptions","Tasks","appbar","flexGrow","maxWidth","margin","base","basename","AppBar","position","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uVA+CeA,WAxCA,SAAAC,GAAK,MAAK,CACrBC,UAAW,CACPC,gBAAiB,SAErBC,QAAS,CAELC,WAAY,OACZC,SAAU,YAiCHN,EA7Bf,YAA8B,IAAZO,EAAW,EAAXA,QACRC,EAAWC,cACjBC,QAAQC,IAAIH,GAFa,MAGCI,mBAASJ,EAASK,UAHnB,mBAGlBC,EAHkB,KAGXC,EAHW,KAOzB,OACI,kBAACC,EAAA,EAAD,CAAMF,MAAOA,EAAOP,QAAS,CAAEL,UAAWK,EAAQL,WAAae,SAJlD,SAACC,EAAGJ,GACjBC,EAASD,KAIL,kBAACK,EAAA,EAAD,CAAKC,UAAWb,EAAQH,QAASiB,MAAM,YAAYC,UAAWC,IAAMC,GAAG,IAAIV,MAAM,MACjF,kBAACK,EAAA,EAAD,CACIC,UAAWb,EAAQH,QACnBiB,MAAM,gBACNC,UAAWC,IACXC,GAAG,iBACHV,MAAM,mBAEV,kBAACK,EAAA,EAAD,CAAKC,UAAWb,EAAQH,QAASiB,MAAM,WAAWC,UAAWC,IAAMC,GAAG,YAAYV,MAAM,cACxF,kBAACK,EAAA,EAAD,CAAKC,UAAWb,EAAQH,QAASiB,MAAM,QAAQC,UAAWC,IAAMC,GAAG,SAASV,MAAM,WAClF,kBAACK,EAAA,EAAD,CACIC,UAAWb,EAAQH,QACnBiB,MAAM,YACNC,UAAWC,IACXC,GAAG,eACHV,MAAM,qBCpCPW,MAJf,WACI,OAAO,yCCGIC,MAJf,WACI,OAAO,2CCGIC,MAJf,WACI,OAAO,0CCGIC,MAJf,WACI,OAAO,8CCGIC,MAJf,WACI,OAAO,sCC8CI7B,WAjCA,SAAAC,GAAK,MAAK,CACrB6B,OAAQ,CACJC,SAAU,EACV5B,gBAAiB,UACjB6B,SAAU,SACVC,OAAQ,QAEZC,KAAM,CACFF,SAAU,SACVC,OAAQ,WAwBDjC,EApBf,YAA2B,IAAZO,EAAW,EAAXA,QAEX,OACI,kBAAC,IAAD,CAAQ4B,SAAS,6BACb,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASjB,UAAWb,EAAQuB,QACzC,kBAAC,EAAD,OAEJ,yBAAKV,UAAWb,EAAQ2B,MACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,iBAAiBC,OAAQ,kBAAM,kBAAC,EAAD,SACjD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,EAAD,SAC5C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,eAAeC,OAAQ,kBAAM,kBAAC,EAAD,eC9B/CC,QACa,cAA7BC,OAAOlC,SAASmC,UAEiB,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MAAM,2DCTvCC,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,SDoHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACH7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.b42cbcd8.chunk.js","sourcesContent":["import withStyles from \"@material-ui/core/styles/withStyles\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\n\nconst styles = theme => ({\n    indicator: {\n        backgroundColor: \"white\"\n    },\n    tabRoot: {\n        // flexGrow: 1,\n        fontWeight: \"bold\",\n        fontSize: \"1.1em\"\n    }\n});\n\nfunction Header({ classes }) {\n    const location = useLocation();\n    console.log(location);\n    const [value, setValue] = useState(location.pathname);\n    const onChange = (e, value) => {\n        setValue(value);\n    };\n    return (\n        <Tabs value={value} classes={{ indicator: classes.indicator }} onChange={onChange}>\n            <Tab className={classes.tabRoot} label=\"Processes\" component={Link} to=\"/\" value=\"/\" />\n            <Tab\n                className={classes.tabRoot}\n                label=\"Subscriptions\"\n                component={Link}\n                to=\"/subscriptions\"\n                value=\"/subscriptions\"\n            />\n            <Tab className={classes.tabRoot} label=\"Metadata\" component={Link} to=\"/metadata\" value=\"/metadata\" />\n            <Tab className={classes.tabRoot} label=\"Tasks\" component={Link} to=\"/tasks\" value=\"/tasks\" />\n            <Tab\n                className={classes.tabRoot}\n                label=\"+ Process\"\n                component={Link}\n                to=\"/new-process\"\n                value=\"/new-process\"\n            />\n        </Tabs>\n    );\n}\nexport default withStyles(styles)(Header);\n","import React from \"react\";\n\nfunction Metadata() {\n    return <h2>Metadata</h2>;\n}\n\nexport default Metadata;\n","import React from \"react\";\n\nfunction NewProcess() {\n    return <h2>NewProcess</h2>;\n}\n\nexport default NewProcess;\n","import React from \"react\";\n\nfunction Processes() {\n    return <h2>Processes</h2>;\n}\n\nexport default Processes;\n","import React from \"react\";\n\nfunction Subscriptions() {\n    return <h2>Subscriptions</h2>;\n}\n\nexport default Subscriptions;\n","import React from \"react\";\n\nfunction Tasks() {\n    return <h2>Tasks</h2>;\n}\n\nexport default Tasks;\n","import \"./App.css\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport Header from \"./components/Header\";\nimport Metadata from \"./pages/Metadata\";\nimport NewProcess from \"./pages/NewProcess\";\nimport Processes from \"./pages/Processes\";\nimport Subscriptions from \"./pages/Subscriptions\";\nimport Tasks from \"./pages/Tasks\";\n\nconst styles = theme => ({\n    appbar: {\n        flexGrow: 1,\n        backgroundColor: \"#4db2cf\",\n        maxWidth: \"1680px\",\n        margin: \"auto\"\n    },\n    base: {\n        maxWidth: \"1680px\",\n        margin: \"auto\"\n    }\n});\n\nfunction App({ classes }) {\n    // Todo: base name will be \"/\" when not deployed on GH-Pages\n    return (\n        <Router basename=\"/material-ui-design-tests\">\n            <AppBar position=\"static\" className={classes.appbar}>\n                <Header />\n            </AppBar>\n            <div className={classes.base}>\n                <Switch>\n                    <Route exact path=\"/\" render={() => <Processes />} />\n                    <Route exact path=\"/subscriptions\" render={() => <Subscriptions />} />\n                    <Route exact path=\"/metadata\" render={() => <Metadata />} />\n                    <Route exact path=\"/tasks\" render={() => <Tasks />} />\n                    <Route exact path=\"/new-process\" render={() => <NewProcess />} />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}